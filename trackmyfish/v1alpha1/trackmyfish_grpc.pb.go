// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package trackmyfishv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// TrackMyFishServiceClient is the client API for TrackMyFishService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TrackMyFishServiceClient interface {
	// AddFish
	//
	// Adds a new Fish
	AddFish(ctx context.Context, in *AddFishRequest, opts ...grpc.CallOption) (*AddFishResponse, error)
	// ListFish
	//
	// Lists Fish
	ListFish(ctx context.Context, in *ListFishRequest, opts ...grpc.CallOption) (*ListFishResponse, error)
	// DeleteFish
	//
	// Deletes a Fish
	DeleteFish(ctx context.Context, in *DeleteFishRequest, opts ...grpc.CallOption) (*DeleteFishResponse, error)
}

type trackMyFishServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTrackMyFishServiceClient(cc grpc.ClientConnInterface) TrackMyFishServiceClient {
	return &trackMyFishServiceClient{cc}
}

func (c *trackMyFishServiceClient) AddFish(ctx context.Context, in *AddFishRequest, opts ...grpc.CallOption) (*AddFishResponse, error) {
	out := new(AddFishResponse)
	err := c.cc.Invoke(ctx, "/trackmyfish.v1alpha1.TrackMyFishService/AddFish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackMyFishServiceClient) ListFish(ctx context.Context, in *ListFishRequest, opts ...grpc.CallOption) (*ListFishResponse, error) {
	out := new(ListFishResponse)
	err := c.cc.Invoke(ctx, "/trackmyfish.v1alpha1.TrackMyFishService/ListFish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *trackMyFishServiceClient) DeleteFish(ctx context.Context, in *DeleteFishRequest, opts ...grpc.CallOption) (*DeleteFishResponse, error) {
	out := new(DeleteFishResponse)
	err := c.cc.Invoke(ctx, "/trackmyfish.v1alpha1.TrackMyFishService/DeleteFish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TrackMyFishServiceServer is the server API for TrackMyFishService service.
// All implementations should embed UnimplementedTrackMyFishServiceServer
// for forward compatibility
type TrackMyFishServiceServer interface {
	// AddFish
	//
	// Adds a new Fish
	AddFish(context.Context, *AddFishRequest) (*AddFishResponse, error)
	// ListFish
	//
	// Lists Fish
	ListFish(context.Context, *ListFishRequest) (*ListFishResponse, error)
	// DeleteFish
	//
	// Deletes a Fish
	DeleteFish(context.Context, *DeleteFishRequest) (*DeleteFishResponse, error)
}

// UnimplementedTrackMyFishServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTrackMyFishServiceServer struct {
}

func (UnimplementedTrackMyFishServiceServer) AddFish(context.Context, *AddFishRequest) (*AddFishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddFish not implemented")
}
func (UnimplementedTrackMyFishServiceServer) ListFish(context.Context, *ListFishRequest) (*ListFishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFish not implemented")
}
func (UnimplementedTrackMyFishServiceServer) DeleteFish(context.Context, *DeleteFishRequest) (*DeleteFishResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFish not implemented")
}

// UnsafeTrackMyFishServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TrackMyFishServiceServer will
// result in compilation errors.
type UnsafeTrackMyFishServiceServer interface {
	mustEmbedUnimplementedTrackMyFishServiceServer()
}

func RegisterTrackMyFishServiceServer(s *grpc.Server, srv TrackMyFishServiceServer) {
	s.RegisterService(&_TrackMyFishService_serviceDesc, srv)
}

func _TrackMyFishService_AddFish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddFishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMyFishServiceServer).AddFish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackmyfish.v1alpha1.TrackMyFishService/AddFish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMyFishServiceServer).AddFish(ctx, req.(*AddFishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackMyFishService_ListFish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMyFishServiceServer).ListFish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackmyfish.v1alpha1.TrackMyFishService/ListFish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMyFishServiceServer).ListFish(ctx, req.(*ListFishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TrackMyFishService_DeleteFish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFishRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TrackMyFishServiceServer).DeleteFish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trackmyfish.v1alpha1.TrackMyFishService/DeleteFish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TrackMyFishServiceServer).DeleteFish(ctx, req.(*DeleteFishRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TrackMyFishService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trackmyfish.v1alpha1.TrackMyFishService",
	HandlerType: (*TrackMyFishServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddFish",
			Handler:    _TrackMyFishService_AddFish_Handler,
		},
		{
			MethodName: "ListFish",
			Handler:    _TrackMyFishService_ListFish_Handler,
		},
		{
			MethodName: "DeleteFish",
			Handler:    _TrackMyFishService_DeleteFish_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "trackmyfish/v1alpha1/trackmyfish.proto",
}
