// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: trackmyfish/v1alpha1/trackmyfish.proto

package trackmyfishv1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartbeatStatus_Status int32

const (
	HeartbeatStatus_UNSPECIFIED HeartbeatStatus_Status = 0
	HeartbeatStatus_OPERATIONAL HeartbeatStatus_Status = 1
	HeartbeatStatus_DEGRADED    HeartbeatStatus_Status = 2
	HeartbeatStatus_DOWN        HeartbeatStatus_Status = 3
)

// Enum value maps for HeartbeatStatus_Status.
var (
	HeartbeatStatus_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OPERATIONAL",
		2: "DEGRADED",
		3: "DOWN",
	}
	HeartbeatStatus_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OPERATIONAL": 1,
		"DEGRADED":    2,
		"DOWN":        3,
	}
)

func (x HeartbeatStatus_Status) Enum() *HeartbeatStatus_Status {
	p := new(HeartbeatStatus_Status)
	*p = x
	return p
}

func (x HeartbeatStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[0].Descriptor()
}

func (HeartbeatStatus_Status) Type() protoreflect.EnumType {
	return &file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[0]
}

func (x HeartbeatStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatStatus_Status.Descriptor instead.
func (HeartbeatStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{8, 0}
}

type Fish_Gender int32

const (
	Fish_UNSPECIFIED Fish_Gender = 0
	Fish_MALE        Fish_Gender = 1
	Fish_FEMALE      Fish_Gender = 2
)

// Enum value maps for Fish_Gender.
var (
	Fish_Gender_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
	}
	Fish_Gender_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MALE":        1,
		"FEMALE":      2,
	}
)

func (x Fish_Gender) Enum() *Fish_Gender {
	p := new(Fish_Gender)
	*p = x
	return p
}

func (x Fish_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fish_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[1].Descriptor()
}

func (Fish_Gender) Type() protoreflect.EnumType {
	return &file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[1]
}

func (x Fish_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fish_Gender.Descriptor instead.
func (Fish_Gender) EnumDescriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{9, 0}
}

type AddFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fish to add
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
	// The number of fish matching this description
	Count int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *AddFishRequest) Reset() {
	*x = AddFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFishRequest) ProtoMessage() {}

func (x *AddFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFishRequest.ProtoReflect.Descriptor instead.
func (*AddFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{0}
}

func (x *AddFishRequest) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

func (x *AddFishRequest) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type AddFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The added fish
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *AddFishResponse) Reset() {
	*x = AddFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFishResponse) ProtoMessage() {}

func (x *AddFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFishResponse.ProtoReflect.Descriptor instead.
func (*AddFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{1}
}

func (x *AddFishResponse) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type ListFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFishRequest) Reset() {
	*x = ListFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishRequest) ProtoMessage() {}

func (x *ListFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishRequest.ProtoReflect.Descriptor instead.
func (*ListFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{2}
}

type ListFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fish
	Fish []*Fish `protobuf:"bytes,1,rep,name=fish,proto3" json:"fish,omitempty"`
}

func (x *ListFishResponse) Reset() {
	*x = ListFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishResponse) ProtoMessage() {}

func (x *ListFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishResponse.ProtoReflect.Descriptor instead.
func (*ListFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{3}
}

func (x *ListFishResponse) GetFish() []*Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type DeleteFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the change.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFishRequest) Reset() {
	*x = DeleteFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFishRequest) ProtoMessage() {}

func (x *DeleteFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFishRequest.ProtoReflect.Descriptor instead.
func (*DeleteFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{4}
}

func (x *DeleteFishRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deleted fish
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *DeleteFishResponse) Reset() {
	*x = DeleteFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFishResponse) ProtoMessage() {}

func (x *DeleteFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFishResponse.ProtoReflect.Descriptor instead.
func (*DeleteFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteFishResponse) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{6}
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fishbase *HeartbeatStatus `protobuf:"bytes,1,opt,name=fishbase,proto3" json:"fishbase,omitempty"`
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{7}
}

func (x *HeartbeatResponse) GetFishbase() *HeartbeatStatus {
	if x != nil {
		return x.Fishbase
	}
	return nil
}

type HeartbeatStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HeartbeatStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=trackmyfish.v1alpha1.HeartbeatStatus_Status" json:"status,omitempty"`
}

func (x *HeartbeatStatus) Reset() {
	*x = HeartbeatStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatStatus) ProtoMessage() {}

func (x *HeartbeatStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatStatus.ProtoReflect.Descriptor instead.
func (*HeartbeatStatus) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{8}
}

func (x *HeartbeatStatus) GetStatus() HeartbeatStatus_Status {
	if x != nil {
		return x.Status
	}
	return HeartbeatStatus_UNSPECIFIED
}

type Fish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the fish.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The genus of the fish
	Genus string `protobuf:"bytes,2,opt,name=genus,proto3" json:"genus,omitempty"`
	// The species of the fish
	Species string `protobuf:"bytes,3,opt,name=species,proto3" json:"species,omitempty"`
	// The common name of the fish
	CommonName string `protobuf:"bytes,4,opt,name=common_name,json=commonName,proto3" json:"common_name,omitempty"`
	// The name of the fish
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	// The color of the fish
	Color string `protobuf:"bytes,6,opt,name=color,proto3" json:"color,omitempty"`
	// The gender of the fish
	Gender Fish_Gender `protobuf:"varint,7,opt,name=gender,proto3,enum=trackmyfish.v1alpha1.Fish_Gender" json:"gender,omitempty"`
	// The date of purchase of the fish
	PurchaseDate string `protobuf:"bytes,8,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	// The fishs ecosystem name
	EcosystemName string `protobuf:"bytes,9,opt,name=ecosystem_name,json=ecosystemName,proto3" json:"ecosystem_name,omitempty"`
	// The fishs ecosystem type
	EcosystemType string `protobuf:"bytes,10,opt,name=ecosystem_type,json=ecosystemType,proto3" json:"ecosystem_type,omitempty"`
	// The fishs ecosystem location
	EcosystemLocation string `protobuf:"bytes,11,opt,name=ecosystem_location,json=ecosystemLocation,proto3" json:"ecosystem_location,omitempty"`
	// The fishs salinity
	Salinity string `protobuf:"bytes,12,opt,name=salinity,proto3" json:"salinity,omitempty"`
	// The fishs climate
	Climate string `protobuf:"bytes,13,opt,name=climate,proto3" json:"climate,omitempty"`
}

func (x *Fish) Reset() {
	*x = Fish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fish) ProtoMessage() {}

func (x *Fish) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fish.ProtoReflect.Descriptor instead.
func (*Fish) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{9}
}

func (x *Fish) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fish) GetGenus() string {
	if x != nil {
		return x.Genus
	}
	return ""
}

func (x *Fish) GetSpecies() string {
	if x != nil {
		return x.Species
	}
	return ""
}

func (x *Fish) GetCommonName() string {
	if x != nil {
		return x.CommonName
	}
	return ""
}

func (x *Fish) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Fish) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Fish) GetGender() Fish_Gender {
	if x != nil {
		return x.Gender
	}
	return Fish_UNSPECIFIED
}

func (x *Fish) GetPurchaseDate() string {
	if x != nil {
		return x.PurchaseDate
	}
	return ""
}

func (x *Fish) GetEcosystemName() string {
	if x != nil {
		return x.EcosystemName
	}
	return ""
}

func (x *Fish) GetEcosystemType() string {
	if x != nil {
		return x.EcosystemType
	}
	return ""
}

func (x *Fish) GetEcosystemLocation() string {
	if x != nil {
		return x.EcosystemLocation
	}
	return ""
}

func (x *Fish) GetSalinity() string {
	if x != nil {
		return x.Salinity
	}
	return ""
}

func (x *Fish) GetClimate() string {
	if x != nil {
		return x.Climate
	}
	return ""
}

var File_trackmyfish_v1alpha1_trackmyfish_proto protoreflect.FileDescriptor

var file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d,
	0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x56, 0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x41, 0x0a,
	0x0f, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68,
	0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68, 0x22, 0x32, 0x0a, 0x11, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41,
	0x06, 0x0a, 0x04, 0x46, 0x69, 0x73, 0x68, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44, 0x0a, 0x12, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66, 0x69, 0x73,
	0x68, 0x22, 0x12, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x56, 0x0a, 0x11, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x66, 0x69,
	0x73, 0x68, 0x62, 0x61, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x08, 0x66, 0x69, 0x73, 0x68, 0x62, 0x61, 0x73, 0x65, 0x22, 0x9b, 0x01,
	0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x44, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41,
	0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0xa3, 0x04, 0x0a, 0x04,
	0x46, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x05, 0x67, 0x65,
	0x6e, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52,
	0x05, 0x67, 0x65, 0x6e, 0x75, 0x73, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x70, 0x65, 0x63, 0x69, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x02, 0x52, 0x07, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x05, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x2e,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x06, 0x67, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x2b, 0x0a, 0x0e, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x65,
	0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x0e,
	0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x0d, 0x65, 0x63, 0x6f, 0x73,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x12, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x11, 0x65, 0x63, 0x6f,
	0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x08, 0x73, 0x61, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x08, 0x73, 0x61, 0x6c, 0x69, 0x6e, 0x69, 0x74, 0x79,
	0x12, 0x1e, 0x0a, 0x07, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x07, 0x63, 0x6c, 0x69, 0x6d, 0x61, 0x74, 0x65,
	0x22, 0x2f, 0x0a, 0x06, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d,
	0x41, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x02, 0x32, 0xf8, 0x03, 0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x79, 0x46, 0x69, 0x73,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x74, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46,
	0x69, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x3a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x12, 0x71,
	0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73,
	0x68, 0x12, 0x7e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x12,
	0x27, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a,
	0x7d, 0x12, 0x79, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x26,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x42, 0x8b, 0x01, 0x5a,
	0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x3b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x92, 0x41, 0x43, 0x12, 0x1d, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x63, 0x6b,
	0x4d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x20, 0x41, 0x50, 0x49, 0x32, 0x0a, 0x31, 0x2e, 0x30, 0x2d,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescOnce sync.Once
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData = file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc
)

func file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP() []byte {
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescOnce.Do(func() {
		file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData = protoimpl.X.CompressGZIP(file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData)
	})
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData
}

var file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes = []interface{}{
	(HeartbeatStatus_Status)(0), // 0: trackmyfish.v1alpha1.HeartbeatStatus.Status
	(Fish_Gender)(0),            // 1: trackmyfish.v1alpha1.Fish.Gender
	(*AddFishRequest)(nil),      // 2: trackmyfish.v1alpha1.AddFishRequest
	(*AddFishResponse)(nil),     // 3: trackmyfish.v1alpha1.AddFishResponse
	(*ListFishRequest)(nil),     // 4: trackmyfish.v1alpha1.ListFishRequest
	(*ListFishResponse)(nil),    // 5: trackmyfish.v1alpha1.ListFishResponse
	(*DeleteFishRequest)(nil),   // 6: trackmyfish.v1alpha1.DeleteFishRequest
	(*DeleteFishResponse)(nil),  // 7: trackmyfish.v1alpha1.DeleteFishResponse
	(*HeartbeatRequest)(nil),    // 8: trackmyfish.v1alpha1.HeartbeatRequest
	(*HeartbeatResponse)(nil),   // 9: trackmyfish.v1alpha1.HeartbeatResponse
	(*HeartbeatStatus)(nil),     // 10: trackmyfish.v1alpha1.HeartbeatStatus
	(*Fish)(nil),                // 11: trackmyfish.v1alpha1.Fish
}
var file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs = []int32{
	11, // 0: trackmyfish.v1alpha1.AddFishRequest.fish:type_name -> trackmyfish.v1alpha1.Fish
	11, // 1: trackmyfish.v1alpha1.AddFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	11, // 2: trackmyfish.v1alpha1.ListFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	11, // 3: trackmyfish.v1alpha1.DeleteFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	10, // 4: trackmyfish.v1alpha1.HeartbeatResponse.fishbase:type_name -> trackmyfish.v1alpha1.HeartbeatStatus
	0,  // 5: trackmyfish.v1alpha1.HeartbeatStatus.status:type_name -> trackmyfish.v1alpha1.HeartbeatStatus.Status
	1,  // 6: trackmyfish.v1alpha1.Fish.gender:type_name -> trackmyfish.v1alpha1.Fish.Gender
	2,  // 7: trackmyfish.v1alpha1.TrackMyFishService.AddFish:input_type -> trackmyfish.v1alpha1.AddFishRequest
	4,  // 8: trackmyfish.v1alpha1.TrackMyFishService.ListFish:input_type -> trackmyfish.v1alpha1.ListFishRequest
	6,  // 9: trackmyfish.v1alpha1.TrackMyFishService.DeleteFish:input_type -> trackmyfish.v1alpha1.DeleteFishRequest
	8,  // 10: trackmyfish.v1alpha1.TrackMyFishService.Heartbeat:input_type -> trackmyfish.v1alpha1.HeartbeatRequest
	3,  // 11: trackmyfish.v1alpha1.TrackMyFishService.AddFish:output_type -> trackmyfish.v1alpha1.AddFishResponse
	5,  // 12: trackmyfish.v1alpha1.TrackMyFishService.ListFish:output_type -> trackmyfish.v1alpha1.ListFishResponse
	7,  // 13: trackmyfish.v1alpha1.TrackMyFishService.DeleteFish:output_type -> trackmyfish.v1alpha1.DeleteFishResponse
	9,  // 14: trackmyfish.v1alpha1.TrackMyFishService.Heartbeat:output_type -> trackmyfish.v1alpha1.HeartbeatResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_trackmyfish_v1alpha1_trackmyfish_proto_init() }
func file_trackmyfish_v1alpha1_trackmyfish_proto_init() {
	if File_trackmyfish_v1alpha1_trackmyfish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes,
		DependencyIndexes: file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs,
		EnumInfos:         file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes,
		MessageInfos:      file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes,
	}.Build()
	File_trackmyfish_v1alpha1_trackmyfish_proto = out.File
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc = nil
	file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes = nil
	file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs = nil
}
