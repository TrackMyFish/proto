// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.15.2
// source: trackmyfish/v1alpha1/trackmyfish.proto

package trackmyfishv1alpha1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type HeartbeatStatus_Status int32

const (
	HeartbeatStatus_UNSPECIFIED HeartbeatStatus_Status = 0
	HeartbeatStatus_OPERATIONAL HeartbeatStatus_Status = 1
	HeartbeatStatus_DEGRADED    HeartbeatStatus_Status = 2
	HeartbeatStatus_DOWN        HeartbeatStatus_Status = 3
)

// Enum value maps for HeartbeatStatus_Status.
var (
	HeartbeatStatus_Status_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OPERATIONAL",
		2: "DEGRADED",
		3: "DOWN",
	}
	HeartbeatStatus_Status_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OPERATIONAL": 1,
		"DEGRADED":    2,
		"DOWN":        3,
	}
)

func (x HeartbeatStatus_Status) Enum() *HeartbeatStatus_Status {
	p := new(HeartbeatStatus_Status)
	*p = x
	return p
}

func (x HeartbeatStatus_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HeartbeatStatus_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[0].Descriptor()
}

func (HeartbeatStatus_Status) Type() protoreflect.EnumType {
	return &file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[0]
}

func (x HeartbeatStatus_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HeartbeatStatus_Status.Descriptor instead.
func (HeartbeatStatus_Status) EnumDescriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{20, 0}
}

type Tank_CapacityMeasurement int32

const (
	Tank_UNSPECIFIED Tank_CapacityMeasurement = 0
	Tank_LITRES      Tank_CapacityMeasurement = 1
	Tank_GALLONS     Tank_CapacityMeasurement = 2
)

// Enum value maps for Tank_CapacityMeasurement.
var (
	Tank_CapacityMeasurement_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "LITRES",
		2: "GALLONS",
	}
	Tank_CapacityMeasurement_value = map[string]int32{
		"UNSPECIFIED": 0,
		"LITRES":      1,
		"GALLONS":     2,
	}
)

func (x Tank_CapacityMeasurement) Enum() *Tank_CapacityMeasurement {
	p := new(Tank_CapacityMeasurement)
	*p = x
	return p
}

func (x Tank_CapacityMeasurement) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Tank_CapacityMeasurement) Descriptor() protoreflect.EnumDescriptor {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[1].Descriptor()
}

func (Tank_CapacityMeasurement) Type() protoreflect.EnumType {
	return &file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[1]
}

func (x Tank_CapacityMeasurement) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Tank_CapacityMeasurement.Descriptor instead.
func (Tank_CapacityMeasurement) EnumDescriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{22, 0}
}

type Fish_Gender int32

const (
	Fish_UNSPECIFIED Fish_Gender = 0
	Fish_MALE        Fish_Gender = 1
	Fish_FEMALE      Fish_Gender = 2
)

// Enum value maps for Fish_Gender.
var (
	Fish_Gender_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
	}
	Fish_Gender_value = map[string]int32{
		"UNSPECIFIED": 0,
		"MALE":        1,
		"FEMALE":      2,
	}
)

func (x Fish_Gender) Enum() *Fish_Gender {
	p := new(Fish_Gender)
	*p = x
	return p
}

func (x Fish_Gender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Fish_Gender) Descriptor() protoreflect.EnumDescriptor {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[2].Descriptor()
}

func (Fish_Gender) Type() protoreflect.EnumType {
	return &file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes[2]
}

func (x Fish_Gender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Fish_Gender.Descriptor instead.
func (Fish_Gender) EnumDescriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{23, 0}
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{0}
}

type HeartbeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HeartbeatResponse) Reset() {
	*x = HeartbeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatResponse) ProtoMessage() {}

func (x *HeartbeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatResponse.ProtoReflect.Descriptor instead.
func (*HeartbeatResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{1}
}

type AddFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The fish to add
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *AddFishRequest) Reset() {
	*x = AddFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFishRequest) ProtoMessage() {}

func (x *AddFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFishRequest.ProtoReflect.Descriptor instead.
func (*AddFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{2}
}

func (x *AddFishRequest) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type AddFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The added fish
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *AddFishResponse) Reset() {
	*x = AddFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddFishResponse) ProtoMessage() {}

func (x *AddFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddFishResponse.ProtoReflect.Descriptor instead.
func (*AddFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{3}
}

func (x *AddFishResponse) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type ListFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListFishRequest) Reset() {
	*x = ListFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishRequest) ProtoMessage() {}

func (x *ListFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishRequest.ProtoReflect.Descriptor instead.
func (*ListFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{4}
}

type ListFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of fish
	Fish []*Fish `protobuf:"bytes,1,rep,name=fish,proto3" json:"fish,omitempty"`
}

func (x *ListFishResponse) Reset() {
	*x = ListFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListFishResponse) ProtoMessage() {}

func (x *ListFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListFishResponse.ProtoReflect.Descriptor instead.
func (*ListFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{5}
}

func (x *ListFishResponse) GetFish() []*Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type DeleteFishRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the change.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteFishRequest) Reset() {
	*x = DeleteFishRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFishRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFishRequest) ProtoMessage() {}

func (x *DeleteFishRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFishRequest.ProtoReflect.Descriptor instead.
func (*DeleteFishRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteFishRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteFishResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deleted fish
	Fish *Fish `protobuf:"bytes,1,opt,name=fish,proto3" json:"fish,omitempty"`
}

func (x *DeleteFishResponse) Reset() {
	*x = DeleteFishResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteFishResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteFishResponse) ProtoMessage() {}

func (x *DeleteFishResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteFishResponse.ProtoReflect.Descriptor instead.
func (*DeleteFishResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{7}
}

func (x *DeleteFishResponse) GetFish() *Fish {
	if x != nil {
		return x.Fish
	}
	return nil
}

type AddTankStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tank statistic to add
	TankStatistic *TankStatistic `protobuf:"bytes,1,opt,name=tank_statistic,json=tankStatistic,proto3" json:"tank_statistic,omitempty"`
}

func (x *AddTankStatisticRequest) Reset() {
	*x = AddTankStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTankStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTankStatisticRequest) ProtoMessage() {}

func (x *AddTankStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTankStatisticRequest.ProtoReflect.Descriptor instead.
func (*AddTankStatisticRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{8}
}

func (x *AddTankStatisticRequest) GetTankStatistic() *TankStatistic {
	if x != nil {
		return x.TankStatistic
	}
	return nil
}

type AddTankStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The added tank statistic
	TankStatistic *TankStatistic `protobuf:"bytes,1,opt,name=tank_statistic,json=tankStatistic,proto3" json:"tank_statistic,omitempty"`
}

func (x *AddTankStatisticResponse) Reset() {
	*x = AddTankStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTankStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTankStatisticResponse) ProtoMessage() {}

func (x *AddTankStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTankStatisticResponse.ProtoReflect.Descriptor instead.
func (*AddTankStatisticResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{9}
}

func (x *AddTankStatisticResponse) GetTankStatistic() *TankStatistic {
	if x != nil {
		return x.TankStatistic
	}
	return nil
}

type ListTankStatisticsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTankStatisticsRequest) Reset() {
	*x = ListTankStatisticsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTankStatisticsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTankStatisticsRequest) ProtoMessage() {}

func (x *ListTankStatisticsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTankStatisticsRequest.ProtoReflect.Descriptor instead.
func (*ListTankStatisticsRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{10}
}

type ListTankStatisticsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of tank statistics
	TankStatistics []*TankStatistic `protobuf:"bytes,1,rep,name=tank_statistics,json=tankStatistics,proto3" json:"tank_statistics,omitempty"`
}

func (x *ListTankStatisticsResponse) Reset() {
	*x = ListTankStatisticsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTankStatisticsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTankStatisticsResponse) ProtoMessage() {}

func (x *ListTankStatisticsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTankStatisticsResponse.ProtoReflect.Descriptor instead.
func (*ListTankStatisticsResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{11}
}

func (x *ListTankStatisticsResponse) GetTankStatistics() []*TankStatistic {
	if x != nil {
		return x.TankStatistics
	}
	return nil
}

type DeleteTankStatisticRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the change.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTankStatisticRequest) Reset() {
	*x = DeleteTankStatisticRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTankStatisticRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTankStatisticRequest) ProtoMessage() {}

func (x *DeleteTankStatisticRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTankStatisticRequest.ProtoReflect.Descriptor instead.
func (*DeleteTankStatisticRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{12}
}

func (x *DeleteTankStatisticRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTankStatisticResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deleted tank statistic
	TankStatistic *TankStatistic `protobuf:"bytes,1,opt,name=tank_statistic,json=tankStatistic,proto3" json:"tank_statistic,omitempty"`
}

func (x *DeleteTankStatisticResponse) Reset() {
	*x = DeleteTankStatisticResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTankStatisticResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTankStatisticResponse) ProtoMessage() {}

func (x *DeleteTankStatisticResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTankStatisticResponse.ProtoReflect.Descriptor instead.
func (*DeleteTankStatisticResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{13}
}

func (x *DeleteTankStatisticResponse) GetTankStatistic() *TankStatistic {
	if x != nil {
		return x.TankStatistic
	}
	return nil
}

type AddTankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The tank to add
	Tank *Tank `protobuf:"bytes,1,opt,name=tank,proto3" json:"tank,omitempty"`
}

func (x *AddTankRequest) Reset() {
	*x = AddTankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTankRequest) ProtoMessage() {}

func (x *AddTankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTankRequest.ProtoReflect.Descriptor instead.
func (*AddTankRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{14}
}

func (x *AddTankRequest) GetTank() *Tank {
	if x != nil {
		return x.Tank
	}
	return nil
}

type AddTankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The added tank
	Tank *Tank `protobuf:"bytes,1,opt,name=tank,proto3" json:"tank,omitempty"`
}

func (x *AddTankResponse) Reset() {
	*x = AddTankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AddTankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddTankResponse) ProtoMessage() {}

func (x *AddTankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddTankResponse.ProtoReflect.Descriptor instead.
func (*AddTankResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{15}
}

func (x *AddTankResponse) GetTank() *Tank {
	if x != nil {
		return x.Tank
	}
	return nil
}

type ListTanksRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListTanksRequest) Reset() {
	*x = ListTanksRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTanksRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTanksRequest) ProtoMessage() {}

func (x *ListTanksRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTanksRequest.ProtoReflect.Descriptor instead.
func (*ListTanksRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{16}
}

type ListTanksResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The list of tanks
	Tanks []*Tank `protobuf:"bytes,1,rep,name=tanks,proto3" json:"tanks,omitempty"`
}

func (x *ListTanksResponse) Reset() {
	*x = ListTanksResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListTanksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListTanksResponse) ProtoMessage() {}

func (x *ListTanksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListTanksResponse.ProtoReflect.Descriptor instead.
func (*ListTanksResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{17}
}

func (x *ListTanksResponse) GetTanks() []*Tank {
	if x != nil {
		return x.Tanks
	}
	return nil
}

type DeleteTankRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the change.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *DeleteTankRequest) Reset() {
	*x = DeleteTankRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTankRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTankRequest) ProtoMessage() {}

func (x *DeleteTankRequest) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTankRequest.ProtoReflect.Descriptor instead.
func (*DeleteTankRequest) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteTankRequest) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type DeleteTankResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The deleted tank
	Tank *Tank `protobuf:"bytes,1,opt,name=tank,proto3" json:"tank,omitempty"`
}

func (x *DeleteTankResponse) Reset() {
	*x = DeleteTankResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTankResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTankResponse) ProtoMessage() {}

func (x *DeleteTankResponse) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTankResponse.ProtoReflect.Descriptor instead.
func (*DeleteTankResponse) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{19}
}

func (x *DeleteTankResponse) GetTank() *Tank {
	if x != nil {
		return x.Tank
	}
	return nil
}

type HeartbeatStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status HeartbeatStatus_Status `protobuf:"varint,1,opt,name=status,proto3,enum=trackmyfish.v1alpha1.HeartbeatStatus_Status" json:"status,omitempty"`
}

func (x *HeartbeatStatus) Reset() {
	*x = HeartbeatStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatStatus) ProtoMessage() {}

func (x *HeartbeatStatus) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatStatus.ProtoReflect.Descriptor instead.
func (*HeartbeatStatus) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{20}
}

func (x *HeartbeatStatus) GetStatus() HeartbeatStatus_Status {
	if x != nil {
		return x.Status
	}
	return HeartbeatStatus_UNSPECIFIED
}

type TankStatistic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the tank statistic.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The date of tank test
	TestDate string `protobuf:"bytes,2,opt,name=test_date,json=testDate,proto3" json:"test_date,omitempty"`
	// The pH level of the tank
	//
	// Types that are assignable to OptionalPh:
	//	*TankStatistic_Ph
	OptionalPh isTankStatistic_OptionalPh `protobuf_oneof:"optional_ph"`
	// The GH level of the tank
	//
	// Types that are assignable to OptionalGh:
	//	*TankStatistic_Gh
	OptionalGh isTankStatistic_OptionalGh `protobuf_oneof:"optional_gh"`
	// The KH level of the tank
	//
	// Types that are assignable to OptionalKh:
	//	*TankStatistic_Kh
	OptionalKh isTankStatistic_OptionalKh `protobuf_oneof:"optional_kh"`
	// The Ammonia level of the tank
	//
	// Types that are assignable to OptionalAmmonia:
	//	*TankStatistic_Ammonia
	OptionalAmmonia isTankStatistic_OptionalAmmonia `protobuf_oneof:"optional_ammonia"`
	// The Nitrite level of the tank
	//
	// Types that are assignable to OptionalNitrite:
	//	*TankStatistic_Nitrite
	OptionalNitrite isTankStatistic_OptionalNitrite `protobuf_oneof:"optional_nitrite"`
	// The Nitrate level of the tank
	//
	// Types that are assignable to OptionalNitrate:
	//	*TankStatistic_Nitrate
	OptionalNitrate isTankStatistic_OptionalNitrate `protobuf_oneof:"optional_nitrate"`
	// The Phosphate level of the tank
	//
	// Types that are assignable to OptionalPhosphate:
	//	*TankStatistic_Phosphate
	OptionalPhosphate isTankStatistic_OptionalPhosphate `protobuf_oneof:"optional_phosphate"`
}

func (x *TankStatistic) Reset() {
	*x = TankStatistic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TankStatistic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TankStatistic) ProtoMessage() {}

func (x *TankStatistic) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TankStatistic.ProtoReflect.Descriptor instead.
func (*TankStatistic) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{21}
}

func (x *TankStatistic) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TankStatistic) GetTestDate() string {
	if x != nil {
		return x.TestDate
	}
	return ""
}

func (m *TankStatistic) GetOptionalPh() isTankStatistic_OptionalPh {
	if m != nil {
		return m.OptionalPh
	}
	return nil
}

func (x *TankStatistic) GetPh() float32 {
	if x, ok := x.GetOptionalPh().(*TankStatistic_Ph); ok {
		return x.Ph
	}
	return 0
}

func (m *TankStatistic) GetOptionalGh() isTankStatistic_OptionalGh {
	if m != nil {
		return m.OptionalGh
	}
	return nil
}

func (x *TankStatistic) GetGh() float32 {
	if x, ok := x.GetOptionalGh().(*TankStatistic_Gh); ok {
		return x.Gh
	}
	return 0
}

func (m *TankStatistic) GetOptionalKh() isTankStatistic_OptionalKh {
	if m != nil {
		return m.OptionalKh
	}
	return nil
}

func (x *TankStatistic) GetKh() float32 {
	if x, ok := x.GetOptionalKh().(*TankStatistic_Kh); ok {
		return x.Kh
	}
	return 0
}

func (m *TankStatistic) GetOptionalAmmonia() isTankStatistic_OptionalAmmonia {
	if m != nil {
		return m.OptionalAmmonia
	}
	return nil
}

func (x *TankStatistic) GetAmmonia() float32 {
	if x, ok := x.GetOptionalAmmonia().(*TankStatistic_Ammonia); ok {
		return x.Ammonia
	}
	return 0
}

func (m *TankStatistic) GetOptionalNitrite() isTankStatistic_OptionalNitrite {
	if m != nil {
		return m.OptionalNitrite
	}
	return nil
}

func (x *TankStatistic) GetNitrite() float32 {
	if x, ok := x.GetOptionalNitrite().(*TankStatistic_Nitrite); ok {
		return x.Nitrite
	}
	return 0
}

func (m *TankStatistic) GetOptionalNitrate() isTankStatistic_OptionalNitrate {
	if m != nil {
		return m.OptionalNitrate
	}
	return nil
}

func (x *TankStatistic) GetNitrate() float32 {
	if x, ok := x.GetOptionalNitrate().(*TankStatistic_Nitrate); ok {
		return x.Nitrate
	}
	return 0
}

func (m *TankStatistic) GetOptionalPhosphate() isTankStatistic_OptionalPhosphate {
	if m != nil {
		return m.OptionalPhosphate
	}
	return nil
}

func (x *TankStatistic) GetPhosphate() float32 {
	if x, ok := x.GetOptionalPhosphate().(*TankStatistic_Phosphate); ok {
		return x.Phosphate
	}
	return 0
}

type isTankStatistic_OptionalPh interface {
	isTankStatistic_OptionalPh()
}

type TankStatistic_Ph struct {
	Ph float32 `protobuf:"fixed32,3,opt,name=ph,proto3,oneof"`
}

func (*TankStatistic_Ph) isTankStatistic_OptionalPh() {}

type isTankStatistic_OptionalGh interface {
	isTankStatistic_OptionalGh()
}

type TankStatistic_Gh struct {
	Gh float32 `protobuf:"fixed32,4,opt,name=gh,proto3,oneof"`
}

func (*TankStatistic_Gh) isTankStatistic_OptionalGh() {}

type isTankStatistic_OptionalKh interface {
	isTankStatistic_OptionalKh()
}

type TankStatistic_Kh struct {
	Kh float32 `protobuf:"fixed32,5,opt,name=kh,proto3,oneof"`
}

func (*TankStatistic_Kh) isTankStatistic_OptionalKh() {}

type isTankStatistic_OptionalAmmonia interface {
	isTankStatistic_OptionalAmmonia()
}

type TankStatistic_Ammonia struct {
	Ammonia float32 `protobuf:"fixed32,6,opt,name=ammonia,proto3,oneof"`
}

func (*TankStatistic_Ammonia) isTankStatistic_OptionalAmmonia() {}

type isTankStatistic_OptionalNitrite interface {
	isTankStatistic_OptionalNitrite()
}

type TankStatistic_Nitrite struct {
	Nitrite float32 `protobuf:"fixed32,7,opt,name=nitrite,proto3,oneof"`
}

func (*TankStatistic_Nitrite) isTankStatistic_OptionalNitrite() {}

type isTankStatistic_OptionalNitrate interface {
	isTankStatistic_OptionalNitrate()
}

type TankStatistic_Nitrate struct {
	Nitrate float32 `protobuf:"fixed32,8,opt,name=nitrate,proto3,oneof"`
}

func (*TankStatistic_Nitrate) isTankStatistic_OptionalNitrate() {}

type isTankStatistic_OptionalPhosphate interface {
	isTankStatistic_OptionalPhosphate()
}

type TankStatistic_Phosphate struct {
	Phosphate float32 `protobuf:"fixed32,9,opt,name=phosphate,proto3,oneof"`
}

func (*TankStatistic_Phosphate) isTankStatistic_OptionalPhosphate() {}

type Tank struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the tank
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The make of the tank
	Make string `protobuf:"bytes,2,opt,name=make,proto3" json:"make,omitempty"`
	// The model of the tank
	Model string `protobuf:"bytes,3,opt,name=model,proto3" json:"model,omitempty"`
	// The name of the tank
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// The location of the tank
	Location string `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
	// The capacity measurement of the tank
	CapacityMeasurement Tank_CapacityMeasurement `protobuf:"varint,6,opt,name=capacity_measurement,json=capacityMeasurement,proto3,enum=trackmyfish.v1alpha1.Tank_CapacityMeasurement" json:"capacity_measurement,omitempty"`
	// The capacity of the tank
	//
	// Types that are assignable to OptionalCapacity:
	//	*Tank_Capacity
	OptionalCapacity isTank_OptionalCapacity `protobuf_oneof:"optional_capacity"`
	// The capacity of the tank
	Description string `protobuf:"bytes,8,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Tank) Reset() {
	*x = Tank{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tank) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tank) ProtoMessage() {}

func (x *Tank) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tank.ProtoReflect.Descriptor instead.
func (*Tank) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{22}
}

func (x *Tank) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Tank) GetMake() string {
	if x != nil {
		return x.Make
	}
	return ""
}

func (x *Tank) GetModel() string {
	if x != nil {
		return x.Model
	}
	return ""
}

func (x *Tank) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Tank) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Tank) GetCapacityMeasurement() Tank_CapacityMeasurement {
	if x != nil {
		return x.CapacityMeasurement
	}
	return Tank_UNSPECIFIED
}

func (m *Tank) GetOptionalCapacity() isTank_OptionalCapacity {
	if m != nil {
		return m.OptionalCapacity
	}
	return nil
}

func (x *Tank) GetCapacity() float32 {
	if x, ok := x.GetOptionalCapacity().(*Tank_Capacity); ok {
		return x.Capacity
	}
	return 0
}

func (x *Tank) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type isTank_OptionalCapacity interface {
	isTank_OptionalCapacity()
}

type Tank_Capacity struct {
	Capacity float32 `protobuf:"fixed32,7,opt,name=capacity,proto3,oneof"`
}

func (*Tank_Capacity) isTank_OptionalCapacity() {}

type Fish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The unique identifier of the fish.
	Id int32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// The type of the fish (e.g. Gourami)
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	// The subtype of the fish (e.g. Pearl)
	Subtype string `protobuf:"bytes,3,opt,name=subtype,proto3" json:"subtype,omitempty"`
	// The color of the fish
	Color string `protobuf:"bytes,4,opt,name=color,proto3" json:"color,omitempty"`
	// The gender of the fish
	Gender Fish_Gender `protobuf:"varint,5,opt,name=gender,proto3,enum=trackmyfish.v1alpha1.Fish_Gender" json:"gender,omitempty"`
	// The date of purchase of the fish
	PurchaseDate string `protobuf:"bytes,6,opt,name=purchase_date,json=purchaseDate,proto3" json:"purchase_date,omitempty"`
	// The number of fish matching this description
	Count int32 `protobuf:"varint,7,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *Fish) Reset() {
	*x = Fish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fish) ProtoMessage() {}

func (x *Fish) ProtoReflect() protoreflect.Message {
	mi := &file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fish.ProtoReflect.Descriptor instead.
func (*Fish) Descriptor() ([]byte, []int) {
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP(), []int{23}
}

func (x *Fish) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Fish) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Fish) GetSubtype() string {
	if x != nil {
		return x.Subtype
	}
	return ""
}

func (x *Fish) GetColor() string {
	if x != nil {
		return x.Color
	}
	return ""
}

func (x *Fish) GetGender() Fish_Gender {
	if x != nil {
		return x.Gender
	}
	return Fish_UNSPECIFIED
}

func (x *Fish) GetPurchaseDate() string {
	if x != nil {
		return x.PurchaseDate
	}
	return ""
}

func (x *Fish) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_trackmyfish_v1alpha1_trackmyfish_proto protoreflect.FileDescriptor

var file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc = []byte{
	0x0a, 0x26, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d,
	0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62,
	0x65, 0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61,
	0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x12, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68,
	0x22, 0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66,
	0x69, 0x73, 0x68, 0x22, 0x11, 0x0a, 0x0f, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69,
	0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69,
	0x73, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x46, 0x69, 0x73, 0x68, 0x52, 0x04, 0x66, 0x69, 0x73, 0x68, 0x22, 0x32, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d, 0xe2, 0x41, 0x01,
	0x02, 0xfa, 0x41, 0x06, 0x0a, 0x04, 0x46, 0x69, 0x73, 0x68, 0x52, 0x02, 0x69, 0x64, 0x22, 0x44,
	0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x69, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68, 0x52, 0x04,
	0x66, 0x69, 0x73, 0x68, 0x22, 0x65, 0x0a, 0x17, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d,
	0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0d, 0x74, 0x61,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x66, 0x0a, 0x18, 0x41,
	0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x6e, 0x6b, 0x5f,
	0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x0d, 0x74, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x22, 0x1b, 0x0a, 0x19, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x22, 0x6a, 0x0a, 0x1a, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d,
	0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54,
	0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0e, 0x74, 0x61,
	0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x22, 0x44, 0x0a, 0x1a,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x16, 0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x0f, 0x0a,
	0x0d, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x02,
	0x69, 0x64, 0x22, 0x69, 0x0a, 0x1b, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x0d,
	0x74, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x22, 0x40, 0x0a,
	0x0e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2e, 0x0a, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x22,
	0x41, 0x0a, 0x0f, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x04, 0x74, 0x61,
	0x6e, 0x6b, 0x22, 0x12, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x45, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61,
	0x6e, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x74,
	0x61, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x05, 0x74, 0x61, 0x6e, 0x6b, 0x73, 0x22, 0x32, 0x0a,
	0x11, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1d, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x0d,
	0xe2, 0x41, 0x01, 0x02, 0xfa, 0x41, 0x06, 0x0a, 0x04, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x02, 0x69,
	0x64, 0x22, 0x44, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66,
	0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x6e,
	0x6b, 0x52, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x22, 0x9b, 0x01, 0x0a, 0x0f, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x74, 0x72,
	0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0x42, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x44, 0x45, 0x47, 0x52, 0x41, 0x44, 0x45, 0x44, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x44,
	0x4f, 0x57, 0x4e, 0x10, 0x03, 0x22, 0x9b, 0x03, 0x0a, 0x0d, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x21, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x16, 0x0a, 0x02, 0x70, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x48, 0x00, 0x52, 0x02, 0x70, 0x68, 0x12, 0x16, 0x0a, 0x02, 0x67, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x01, 0x52, 0x02, 0x67, 0x68,
	0x12, 0x16, 0x0a, 0x02, 0x6b, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x48, 0x02, 0x52, 0x02, 0x6b, 0x68, 0x12, 0x20, 0x0a, 0x07, 0x61, 0x6d, 0x6d, 0x6f,
	0x6e, 0x69, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48,
	0x03, 0x52, 0x07, 0x61, 0x6d, 0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x12, 0x20, 0x0a, 0x07, 0x6e, 0x69,
	0x74, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x48, 0x04, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x07,
	0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x42, 0x04, 0xe2,
	0x41, 0x01, 0x01, 0x48, 0x05, 0x52, 0x07, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x12, 0x24,
	0x0a, 0x09, 0x70, 0x68, 0x6f, 0x73, 0x70, 0x68, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x06, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x73, 0x70,
	0x68, 0x61, 0x74, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x67, 0x68, 0x42, 0x0d, 0x0a, 0x0b, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6b,
	0x68, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x61, 0x6d,
	0x6d, 0x6f, 0x6e, 0x69, 0x61, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x5f, 0x6e, 0x69, 0x74, 0x72, 0x69, 0x74, 0x65, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x69, 0x74, 0x72, 0x61, 0x74, 0x65, 0x42, 0x14, 0x0a,
	0x12, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x68, 0x6f, 0x73, 0x70, 0x68,
	0x61, 0x74, 0x65, 0x22, 0x99, 0x03, 0x0a, 0x04, 0x54, 0x61, 0x6e, 0x6b, 0x12, 0x14, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x18, 0x0a, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x6b, 0x65, 0x12, 0x1a, 0x0a, 0x05,
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01,
	0x01, 0x52, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x14, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x61, 0x6e, 0x6b, 0x2e, 0x43,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x13, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a,
	0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x01, 0x48, 0x00, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x26, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3f, 0x0a, 0x13, 0x43, 0x61, 0x70,
	0x61, 0x63, 0x69, 0x74, 0x79, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4c, 0x49, 0x54, 0x52, 0x45, 0x53, 0x10, 0x01, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x41, 0x4c, 0x4c, 0x4f, 0x4e, 0x53, 0x10, 0x02, 0x42, 0x13, 0x0a, 0x11, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x22,
	0xab, 0x02, 0x0a, 0x04, 0x46, 0x69, 0x73, 0x68, 0x12, 0x14, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x03, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x73, 0x75, 0x62, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x03, 0x52,
	0x07, 0x73, 0x75, 0x62, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x05, 0x63, 0x6f, 0x6c, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x05, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x46, 0x69, 0x73, 0x68,
	0x2e, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x42, 0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x06, 0x67,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x0d, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x04, 0xe2, 0x41,
	0x01, 0x01, 0x52, 0x0c, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x44, 0x61, 0x74, 0x65,
	0x12, 0x1a, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x42,
	0x04, 0xe2, 0x41, 0x01, 0x01, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x06,
	0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10,
	0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x32, 0xcf, 0x0a,
	0x0a, 0x12, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x4d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x79, 0x0a, 0x09, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x63,
	0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x1b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x15, 0x12, 0x13, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12,
	0x74, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x12, 0x24, 0x2e, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x46, 0x69, 0x73, 0x68, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x22,
	0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x3a,
	0x04, 0x66, 0x69, 0x73, 0x68, 0x12, 0x71, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x12, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b,
	0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73, 0x68, 0x12, 0x7e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x12, 0x27, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x28, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x46, 0x69, 0x73,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x66, 0x69, 0x73,
	0x68, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x12, 0xa4, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x64,
	0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12, 0x2d, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2e, 0x2e, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x31, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x2b, 0x22, 0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f,
	0x74, 0x61, 0x6e, 0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x3a,
	0x0e, 0x74, 0x61, 0x6e, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x12,
	0x9a, 0x01, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0x2f, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x30, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d,
	0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x19, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x6e,
	0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x12, 0xa4, 0x01, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x73, 0x74, 0x69, 0x63, 0x12, 0x30, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x22, 0x2a, 0x20, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x6e,
	0x6b, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x2f, 0x7b, 0x69, 0x64,
	0x3d, 0x2a, 0x7d, 0x12, 0x74, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x12, 0x24,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x54,
	0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x16, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74,
	0x61, 0x6e, 0x6b, 0x3a, 0x04, 0x74, 0x61, 0x6e, 0x6b, 0x12, 0x74, 0x0a, 0x09, 0x4c, 0x69, 0x73,
	0x74, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x12, 0x26, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69,
	0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x27,
	0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x54, 0x61, 0x6e, 0x6b, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12,
	0x0e, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x6e, 0x6b, 0x12,
	0x7e, 0x0a, 0x0a, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x12, 0x27, 0x2e,
	0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79,
	0x66, 0x69, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x6e, 0x6b, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0x1d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x17, 0x2a, 0x15, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2f, 0x74, 0x61, 0x6e, 0x6b, 0x2f, 0x7b, 0x69, 0x64, 0x3d, 0x2a, 0x7d, 0x42,
	0x8b, 0x01, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74,
	0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x3b, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x6d, 0x79, 0x66, 0x69, 0x73, 0x68, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x92, 0x41, 0x43, 0x12, 0x1d, 0x0a, 0x0f, 0x54, 0x72,
	0x61, 0x63, 0x6b, 0x4d, 0x79, 0x46, 0x69, 0x73, 0x68, 0x20, 0x41, 0x50, 0x49, 0x32, 0x0a, 0x31,
	0x2e, 0x30, 0x2d, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescOnce sync.Once
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData = file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc
)

func file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescGZIP() []byte {
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescOnce.Do(func() {
		file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData = protoimpl.X.CompressGZIP(file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData)
	})
	return file_trackmyfish_v1alpha1_trackmyfish_proto_rawDescData
}

var file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes = []interface{}{
	(HeartbeatStatus_Status)(0),         // 0: trackmyfish.v1alpha1.HeartbeatStatus.Status
	(Tank_CapacityMeasurement)(0),       // 1: trackmyfish.v1alpha1.Tank.CapacityMeasurement
	(Fish_Gender)(0),                    // 2: trackmyfish.v1alpha1.Fish.Gender
	(*HeartbeatRequest)(nil),            // 3: trackmyfish.v1alpha1.HeartbeatRequest
	(*HeartbeatResponse)(nil),           // 4: trackmyfish.v1alpha1.HeartbeatResponse
	(*AddFishRequest)(nil),              // 5: trackmyfish.v1alpha1.AddFishRequest
	(*AddFishResponse)(nil),             // 6: trackmyfish.v1alpha1.AddFishResponse
	(*ListFishRequest)(nil),             // 7: trackmyfish.v1alpha1.ListFishRequest
	(*ListFishResponse)(nil),            // 8: trackmyfish.v1alpha1.ListFishResponse
	(*DeleteFishRequest)(nil),           // 9: trackmyfish.v1alpha1.DeleteFishRequest
	(*DeleteFishResponse)(nil),          // 10: trackmyfish.v1alpha1.DeleteFishResponse
	(*AddTankStatisticRequest)(nil),     // 11: trackmyfish.v1alpha1.AddTankStatisticRequest
	(*AddTankStatisticResponse)(nil),    // 12: trackmyfish.v1alpha1.AddTankStatisticResponse
	(*ListTankStatisticsRequest)(nil),   // 13: trackmyfish.v1alpha1.ListTankStatisticsRequest
	(*ListTankStatisticsResponse)(nil),  // 14: trackmyfish.v1alpha1.ListTankStatisticsResponse
	(*DeleteTankStatisticRequest)(nil),  // 15: trackmyfish.v1alpha1.DeleteTankStatisticRequest
	(*DeleteTankStatisticResponse)(nil), // 16: trackmyfish.v1alpha1.DeleteTankStatisticResponse
	(*AddTankRequest)(nil),              // 17: trackmyfish.v1alpha1.AddTankRequest
	(*AddTankResponse)(nil),             // 18: trackmyfish.v1alpha1.AddTankResponse
	(*ListTanksRequest)(nil),            // 19: trackmyfish.v1alpha1.ListTanksRequest
	(*ListTanksResponse)(nil),           // 20: trackmyfish.v1alpha1.ListTanksResponse
	(*DeleteTankRequest)(nil),           // 21: trackmyfish.v1alpha1.DeleteTankRequest
	(*DeleteTankResponse)(nil),          // 22: trackmyfish.v1alpha1.DeleteTankResponse
	(*HeartbeatStatus)(nil),             // 23: trackmyfish.v1alpha1.HeartbeatStatus
	(*TankStatistic)(nil),               // 24: trackmyfish.v1alpha1.TankStatistic
	(*Tank)(nil),                        // 25: trackmyfish.v1alpha1.Tank
	(*Fish)(nil),                        // 26: trackmyfish.v1alpha1.Fish
}
var file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs = []int32{
	26, // 0: trackmyfish.v1alpha1.AddFishRequest.fish:type_name -> trackmyfish.v1alpha1.Fish
	26, // 1: trackmyfish.v1alpha1.AddFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	26, // 2: trackmyfish.v1alpha1.ListFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	26, // 3: trackmyfish.v1alpha1.DeleteFishResponse.fish:type_name -> trackmyfish.v1alpha1.Fish
	24, // 4: trackmyfish.v1alpha1.AddTankStatisticRequest.tank_statistic:type_name -> trackmyfish.v1alpha1.TankStatistic
	24, // 5: trackmyfish.v1alpha1.AddTankStatisticResponse.tank_statistic:type_name -> trackmyfish.v1alpha1.TankStatistic
	24, // 6: trackmyfish.v1alpha1.ListTankStatisticsResponse.tank_statistics:type_name -> trackmyfish.v1alpha1.TankStatistic
	24, // 7: trackmyfish.v1alpha1.DeleteTankStatisticResponse.tank_statistic:type_name -> trackmyfish.v1alpha1.TankStatistic
	25, // 8: trackmyfish.v1alpha1.AddTankRequest.tank:type_name -> trackmyfish.v1alpha1.Tank
	25, // 9: trackmyfish.v1alpha1.AddTankResponse.tank:type_name -> trackmyfish.v1alpha1.Tank
	25, // 10: trackmyfish.v1alpha1.ListTanksResponse.tanks:type_name -> trackmyfish.v1alpha1.Tank
	25, // 11: trackmyfish.v1alpha1.DeleteTankResponse.tank:type_name -> trackmyfish.v1alpha1.Tank
	0,  // 12: trackmyfish.v1alpha1.HeartbeatStatus.status:type_name -> trackmyfish.v1alpha1.HeartbeatStatus.Status
	1,  // 13: trackmyfish.v1alpha1.Tank.capacity_measurement:type_name -> trackmyfish.v1alpha1.Tank.CapacityMeasurement
	2,  // 14: trackmyfish.v1alpha1.Fish.gender:type_name -> trackmyfish.v1alpha1.Fish.Gender
	3,  // 15: trackmyfish.v1alpha1.TrackMyFishService.Heartbeat:input_type -> trackmyfish.v1alpha1.HeartbeatRequest
	5,  // 16: trackmyfish.v1alpha1.TrackMyFishService.AddFish:input_type -> trackmyfish.v1alpha1.AddFishRequest
	7,  // 17: trackmyfish.v1alpha1.TrackMyFishService.ListFish:input_type -> trackmyfish.v1alpha1.ListFishRequest
	9,  // 18: trackmyfish.v1alpha1.TrackMyFishService.DeleteFish:input_type -> trackmyfish.v1alpha1.DeleteFishRequest
	11, // 19: trackmyfish.v1alpha1.TrackMyFishService.AddTankStatistic:input_type -> trackmyfish.v1alpha1.AddTankStatisticRequest
	13, // 20: trackmyfish.v1alpha1.TrackMyFishService.ListTankStatistics:input_type -> trackmyfish.v1alpha1.ListTankStatisticsRequest
	15, // 21: trackmyfish.v1alpha1.TrackMyFishService.DeleteTankStatistic:input_type -> trackmyfish.v1alpha1.DeleteTankStatisticRequest
	17, // 22: trackmyfish.v1alpha1.TrackMyFishService.AddTank:input_type -> trackmyfish.v1alpha1.AddTankRequest
	19, // 23: trackmyfish.v1alpha1.TrackMyFishService.ListTanks:input_type -> trackmyfish.v1alpha1.ListTanksRequest
	21, // 24: trackmyfish.v1alpha1.TrackMyFishService.DeleteTank:input_type -> trackmyfish.v1alpha1.DeleteTankRequest
	4,  // 25: trackmyfish.v1alpha1.TrackMyFishService.Heartbeat:output_type -> trackmyfish.v1alpha1.HeartbeatResponse
	6,  // 26: trackmyfish.v1alpha1.TrackMyFishService.AddFish:output_type -> trackmyfish.v1alpha1.AddFishResponse
	8,  // 27: trackmyfish.v1alpha1.TrackMyFishService.ListFish:output_type -> trackmyfish.v1alpha1.ListFishResponse
	10, // 28: trackmyfish.v1alpha1.TrackMyFishService.DeleteFish:output_type -> trackmyfish.v1alpha1.DeleteFishResponse
	12, // 29: trackmyfish.v1alpha1.TrackMyFishService.AddTankStatistic:output_type -> trackmyfish.v1alpha1.AddTankStatisticResponse
	14, // 30: trackmyfish.v1alpha1.TrackMyFishService.ListTankStatistics:output_type -> trackmyfish.v1alpha1.ListTankStatisticsResponse
	16, // 31: trackmyfish.v1alpha1.TrackMyFishService.DeleteTankStatistic:output_type -> trackmyfish.v1alpha1.DeleteTankStatisticResponse
	18, // 32: trackmyfish.v1alpha1.TrackMyFishService.AddTank:output_type -> trackmyfish.v1alpha1.AddTankResponse
	20, // 33: trackmyfish.v1alpha1.TrackMyFishService.ListTanks:output_type -> trackmyfish.v1alpha1.ListTanksResponse
	22, // 34: trackmyfish.v1alpha1.TrackMyFishService.DeleteTank:output_type -> trackmyfish.v1alpha1.DeleteTankResponse
	25, // [25:35] is the sub-list for method output_type
	15, // [15:25] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_trackmyfish_v1alpha1_trackmyfish_proto_init() }
func file_trackmyfish_v1alpha1_trackmyfish_proto_init() {
	if File_trackmyfish_v1alpha1_trackmyfish_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFishRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteFishResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTankStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTankStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTankStatisticsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTankStatisticsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTankStatisticRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTankStatisticResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AddTankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTanksRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListTanksResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTankRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTankResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TankStatistic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tank); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*TankStatistic_Ph)(nil),
		(*TankStatistic_Gh)(nil),
		(*TankStatistic_Kh)(nil),
		(*TankStatistic_Ammonia)(nil),
		(*TankStatistic_Nitrite)(nil),
		(*TankStatistic_Nitrate)(nil),
		(*TankStatistic_Phosphate)(nil),
	}
	file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Tank_Capacity)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes,
		DependencyIndexes: file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs,
		EnumInfos:         file_trackmyfish_v1alpha1_trackmyfish_proto_enumTypes,
		MessageInfos:      file_trackmyfish_v1alpha1_trackmyfish_proto_msgTypes,
	}.Build()
	File_trackmyfish_v1alpha1_trackmyfish_proto = out.File
	file_trackmyfish_v1alpha1_trackmyfish_proto_rawDesc = nil
	file_trackmyfish_v1alpha1_trackmyfish_proto_goTypes = nil
	file_trackmyfish_v1alpha1_trackmyfish_proto_depIdxs = nil
}
